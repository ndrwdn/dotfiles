" ViM FTW!
set nocompatible



""""
" vim-plug setup
""""
call plug#begin('~/.vim/plugged')

"""
" My Plugins
"""
Plug 'tpope/vim-vinegar'

Plug 'tmhedberg/matchit'

Plug 'kien/ctrlp.vim'

Plug 'tpope/vim-repeat'

Plug 'tpope/vim-surround'

Plug 'tpope/vim-unimpaired'

Plug 'tpope/vim-fireplace'

Plug 'guns/vim-clojure-static'

Plug 'guns/vim-clojure-highlight'

Plug 'kien/rainbow_parentheses.vim'

Plug 'guns/vim-sexp'

Plug 'tpope/vim-sexp-mappings-for-regular-people'

Plug 'pangloss/vim-javascript'

Plug 'HTML-AutoCloseTag'

Plug 'rking/ag.vim'

Plug 'elzr/vim-json'

Plug 'tpope/vim-fugitive'

Plug 'christoomey/vim-tmux-navigator'

Plug 'travitch/hasksyn'

Plug 'rust-lang/rust.vim'

Plug 'racer-rust/vim-racer'

Plug 'cespare/vim-toml'

Plug 'mustache/vim-mustache-handlebars'

Plug 'elixir-lang/vim-elixir'

call plug#end()
filetype plugin indent on
""""
" End vim-plug setup
""""



""""
" Indentation and tab handling settings
""""

"Use auto indenting
"Not sure if I need this?
"set autoindent

"Use spaces, not tabs.
set expandtab

"Round the indentation of < and > to multiple of 'shiftwidth'
set shiftround

"Number of spaces an indent level is.
set shiftwidth=2

"Use smart indenting
"Not sure if I need this?
set smartindent

"A tab is this many spaces.
set tabstop=2



""""
" Backup and swap file settings.
""""

"Don't keep a backup file. It's annoying and litters the file system.
set nobackup

"Don't like swapfiles
set noswapfile

"Don't write backup file.
set nowritebackup



""""
" Search settings
""""

"Highlight all search matches
set hlsearch

"Search is case insensitive (also see smartcase below).
set ignorecase

"Search is incremental (matches as you type).
set incsearch

"Search respects case when specified (see 'ignorecase' above).
set smartcase



""""
" Other settings
""""

"Allow backspacing over text that wasn't in the original insert.
set backspace=eol,indent,start

"Like having 2 lines for cmd-line
set cmdheight=2

"'c' shows '$' at end of text.
set cpoptions+=$

"Highlight the entire line the cursor is on.
"I've used this in the past, but trying without it for awhile.
"set cursorline

"Options for how diff is used/displayed.
set diffopt=filler,vertical

"Don't show any fill chars
set fillchars=""

"Always show a 2-char wide fold column
set foldcolumn=2

"Set the default foldlevel.
set foldlevel=10

"Set the foldmethod.
"Not sure if I need this?
"set foldmethod=syntax

"Remove menubar and toolbar from GUI.
set guioptions-=m
set guioptions-=T

"Allow hiding of changed buffers.
set hidden

"A resonable history. Should I make it smaller?
set history=250

"Always show the status line.
set laststatus=2

"Show 'listchars' below, i.e., special characters, trailing whitespace, etc.
set list

"Mappings for 'list' of special characters.
set listchars=tab:>.,trail:.,extends:#,nbsp:.

"Don't hide the mouse pointer when typing.
set nomousehide

"Show line number column.
set number

"Printing options: page numbering, letter-sized paper, syntax highlighting.
set printoptions=number:y,paper:letter,syntax:y

"Turn on the ruler.
"Not sure if I need this with my statusline settings?
"set ruler

"Show this number of lines above/below cursor.
set scrolloff=3

"Allow past line but not inclusive (not sure what this means).
set selection=exclusive

"Put this at the beginning of wrapped lines.
set showbreak=%

"Show partially complete commands (useful for Normal mode).
set showcmd

"My statusline. Probably need to tweak and document it all.
set statusline=%t\ %3(%m%)%r%y\ [%{&ff}]%=Line:\ %-10(%l/%L%)\ Col:\ %-4(%c%)\ Buf:\ %-2(%n%)\ %11([%b][0x%B]%)

"My window title string. Probably need to tweak and document this.
set titlestring=%t\ %M%(\ (%{expand(\"%:p:~:h\")})%)

"Keep this many undo levels.
set undolevels=250

"Use command line completion
set wildmenu

"Complete full match and then next partial match.
set wildmode=full

"A window can be this high.
set winminheight=0

"Don't highlight matching parens
let g:loaded_matchparen = 1



""""
" netrw settings
""""
let g:netrw_banner = 0
let g:netrw_liststyle = 3

" Allow deleting netrw buffers
autocmd FileType netrw setl bufhidden=wipe


""""
" OS X and Linux options
""""
if has("macunix")
    set guifont=Menlo:h12
    set guioptions+=a
    set softtabstop=2
    syntax enable
    let $PATH = "/User/ThoughtWorks/Applications:" . $PATH
elseif has("unix")
    set clipboard+=unnamed
    set guifont=Inconsolata-g\ 9
    set guioptions+=a
    set softtabstop=2
    syntax enable
    let $PATH = "/home/andrew/programs/bin:" . $PATH
endif



""""
" Windows options
""""
if has("win32")
    source $VIMRUNTIME/mswin.vim
    set grepprg=grep\ -n
    set guifont=Inconsolata:h12:cANSI
    set guioptions-=a
    set clipboard-=unnamed
    syntax enable
endif



""""
" Colorscheme options
""""
colorscheme jellybeans



""""
" Functions
""""

" Hex Editing - Helper function to toggle hex mode (see keybinding below).
function! ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
    %s/\r$//g
    goto
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

" If buffer modified, update any 'Last modified: ' in the first 20 lines.
" 'Last modified: ' can have up to 10 characters before (they are retained).
" Restores cursor and window position using save_cursor variable.
" See autocmd below.
function! LastModified()
  if &modified
    let save_cursor = getpos(".")
    let n = min([20, line("$")])
    keepjumps exe '1,' . n . 's#^\(.\{,10}Last modified: \).*#\1' .
          \ strftime('%c') . '#e'
    call histdel('search', -1)
    call setpos('.', save_cursor)
  endif
endfun

" ToggleList - Changes between list and nolist (see keybinding below)
function! ToggleList()
    if &list == 0
        set list
    else
        set nolist
    endif
endfunction

function! RestIt() range
  let l:request_line = split(getline(a:firstline), ' ')
  let l:request = "curl -k -s -i -X " . l:request_line[0] . " \"" .  l:request_line[1] . "\""

  for line_number in range(a:firstline + 1, a:lastline)
    let l:line = getline(line_number)
    if l:line == ''
      let l:body_line_number = line_number + 1
      break
    endif
    let l:request .= " -H '" . line . "'"
  endfor

  if exists("l:body_line_number")
    let l:body = ""
    for line_number in range(l:body_line_number, a:lastline)
      let l:body .= getline(line_number)
    endfor
    let l:request .= " -d '" . l:body . "'"
  endif

  let l:response = system(l:request)
  let l:text = [''] + split(l:response, '\r\n') + ['=======']
  call append(a:lastline, l:text)
endfunction



""""
" Sets up a call to the LastModified function (see above).
""""
autocmd BufWritePre * call LastModified()



""""
" Keybindings
""""

" Setup mapleader
" Not sure if I need the g: or the local.
let mapleader=" "
let maplocalleader=" "

" Set the path to this config file.
let $vimrc=expand("<sfile>")

" These allow us to load and source this config file.
nmap <silent> <leader>ev :e $vimrc<CR>
nmap <silent> <leader>sv :so $vimrc<CR>

" Allow us to turn off the current search results.
nmap <silent> <leader>/ :nohlsearch<CR>

" Switch to previous window
nmap <silent> <leader>p <C-w>p

" Swap the current window with the previous window
nmap <silent> <leader>s <C-w>x

" Mappings for deleting a buffer
nmap <silent> <leader>d :bp<bar>bd #<CR>
nmap <silent> <leader>D :bd %<CR>

" Function - Toggle list/nolist
nmap <silent> <leader>l :call ToggleList()<CR>

" Function - Toggle hex editing mode.
nmap <silent> <leader>x :call ToggleHex()<CR>

" Function to do http request
vmap <silent> <leader>r :call RestIt()<CR>

" Try to pretty-print JSON
vmap <silent> <leader>j !python -mjson.tool<CR>

" Try to pretty-print xml
vmap <silent> <leader>x !xmllint --format -<CR>

" Replace nulls (0x00) as newlines
nmap <silent> <leader>nn :s/<C-V>000/\r/g<CR>

" Convert Base64 encoded data to hexdump
vmap <silent> <leader>64 <Esc>`>i<CR><Esc>`<i<CR><Esc><S-V>:!base64 -D <bar> hexdump -C<CR>

" Plugin - vim-plug, install current plugins.
nmap <silent> <leader>pi :PlugClean!<CR>:PlugUpdate<CR>

" Plugin - CtrlP
nmap <silent> <leader>f :CtrlP<CR>
nmap <silent> <leader>a :CtrlPBuffer<CR>

" Plugin - Fugitive
nmap <silent> <leader>gst :Gstatus<CR>
nmap <silent> <leader>gd :Gdiff<CR>
nmap <silent> <leader>gc :Gcommit<CR>

" Insert ISO 8601 timestamp (normal or insert mode)
nnoremap <F2> "=strftime("%Y-%m-%dT%H:%M:%SZ")<CR>P
inoremap <F2> <C-R>=strftime("%Y-%m-%dT%H:%M:%SZ")<CR>


""""
" vim-clojure plugin settings
""""
let vimclojure#DynamicHighlighting = 1
let vimclojure#HighlightBuiltins = 1
let vimclojure#ParenRainbow = 1
let vimclojure#WantNailgun = 1



""""
" rainbow_parentheses settings
""""
let g:rbpt_colorpairs = [
  \ ['brown',       'RoyalBlue3'],
  \ ['Darkblue',    'SeaGreen3'],
  \ ['darkgray',    'DarkOrchid3'],
  \ ['darkgreen',   'firebrick3'],
  \ ['darkcyan',    'RoyalBlue3'],
  \ ['darkred',     'SeaGreen3'],
  \ ['darkmagenta', 'DarkOrchid3'],
  \ ['brown',       'firebrick3'],
  \ ['gray',        'RoyalBlue3'],
  \ ['blue',       'SeaGreen3'],
  \ ['darkmagenta', 'DarkOrchid3'],
  \ ['Darkblue',    'firebrick3'],
  \ ['darkgreen',   'RoyalBlue3'],
  \ ['darkcyan',    'SeaGreen3'],
  \ ['darkred',     'DarkOrchid3'],
  \ ['red',         'firebrick3'],
  \ ]
autocmd BufNewFile,BufReadPost *.clj RainbowParenthesesActivate
autocmd BufNewFile,BufReadPost *.clj RainbowParenthesesLoadRound
autocmd BufNewFile,BufReadPost *.clj RainbowParenthesesLoadSquare
autocmd BufNewFile,BufReadPost *.clj RainbowParenthesesLoadBraces



""""
" HTML Indentation Settings
""""
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"



""""
" AsciiDoc Settings
""""
autocmd BufRead *.adoc set ft=asciidoc



""""
" Ctrl-P Settings
""""
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_mruf_relative = 1
let g:ctrlp_show_hidden = 1



""""
" From Derek Wyatt
""""
set lazyredraw
set timeoutlen=500
set showfulltag

" Search the current file for what's currently in the search register and display matches
nmap <silent> <leader>gs :vimgrep /<C-r>// %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>

" Search the current file for the word under the cursor and display matches
nmap <silent> <leader>gw :vimgrep /<C-r><C-w>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>

" Search the current file for the WORD under the cursor and display matches
nmap <silent> <leader>gW :vimgrep /<C-r><C-a>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>



""""
" From Jaco
""""
" Set visual bell (basically no audio notifications)
set vb

" Open new windows on the bottom and right instead of the top and left
set splitbelow
set splitright



""""
" Paredit
""""
let g:paredit_electric_return = 0
let g:paredit_smartjump = 1



""""
" vim-json
""""

" Don't hide quotes
let g:vim_json_syntax_conceal = 0
